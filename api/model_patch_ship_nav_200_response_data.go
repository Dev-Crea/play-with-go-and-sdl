/*
SpaceTraders API

SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   

API version: 2.3.0
Contact: joel@spacetraders.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PatchShipNav200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchShipNav200ResponseData{}

// PatchShipNav200ResponseData struct for PatchShipNav200ResponseData
type PatchShipNav200ResponseData struct {
	Nav ShipNav `json:"nav"`
	Fuel ShipFuel `json:"fuel"`
	Events []ShipConditionEvent `json:"events"`
}

type _PatchShipNav200ResponseData PatchShipNav200ResponseData

// NewPatchShipNav200ResponseData instantiates a new PatchShipNav200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchShipNav200ResponseData(nav ShipNav, fuel ShipFuel, events []ShipConditionEvent) *PatchShipNav200ResponseData {
	this := PatchShipNav200ResponseData{}
	this.Nav = nav
	this.Fuel = fuel
	this.Events = events
	return &this
}

// NewPatchShipNav200ResponseDataWithDefaults instantiates a new PatchShipNav200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchShipNav200ResponseDataWithDefaults() *PatchShipNav200ResponseData {
	this := PatchShipNav200ResponseData{}
	return &this
}

// GetNav returns the Nav field value
func (o *PatchShipNav200ResponseData) GetNav() ShipNav {
	if o == nil {
		var ret ShipNav
		return ret
	}

	return o.Nav
}

// GetNavOk returns a tuple with the Nav field value
// and a boolean to check if the value has been set.
func (o *PatchShipNav200ResponseData) GetNavOk() (*ShipNav, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nav, true
}

// SetNav sets field value
func (o *PatchShipNav200ResponseData) SetNav(v ShipNav) {
	o.Nav = v
}

// GetFuel returns the Fuel field value
func (o *PatchShipNav200ResponseData) GetFuel() ShipFuel {
	if o == nil {
		var ret ShipFuel
		return ret
	}

	return o.Fuel
}

// GetFuelOk returns a tuple with the Fuel field value
// and a boolean to check if the value has been set.
func (o *PatchShipNav200ResponseData) GetFuelOk() (*ShipFuel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fuel, true
}

// SetFuel sets field value
func (o *PatchShipNav200ResponseData) SetFuel(v ShipFuel) {
	o.Fuel = v
}

// GetEvents returns the Events field value
func (o *PatchShipNav200ResponseData) GetEvents() []ShipConditionEvent {
	if o == nil {
		var ret []ShipConditionEvent
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *PatchShipNav200ResponseData) GetEventsOk() ([]ShipConditionEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *PatchShipNav200ResponseData) SetEvents(v []ShipConditionEvent) {
	o.Events = v
}

func (o PatchShipNav200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchShipNav200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nav"] = o.Nav
	toSerialize["fuel"] = o.Fuel
	toSerialize["events"] = o.Events
	return toSerialize, nil
}

func (o *PatchShipNav200ResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nav",
		"fuel",
		"events",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPatchShipNav200ResponseData := _PatchShipNav200ResponseData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPatchShipNav200ResponseData)

	if err != nil {
		return err
	}

	*o = PatchShipNav200ResponseData(varPatchShipNav200ResponseData)

	return err
}

type NullablePatchShipNav200ResponseData struct {
	value *PatchShipNav200ResponseData
	isSet bool
}

func (v NullablePatchShipNav200ResponseData) Get() *PatchShipNav200ResponseData {
	return v.value
}

func (v *NullablePatchShipNav200ResponseData) Set(val *PatchShipNav200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchShipNav200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchShipNav200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchShipNav200ResponseData(val *PatchShipNav200ResponseData) *NullablePatchShipNav200ResponseData {
	return &NullablePatchShipNav200ResponseData{value: val, isSet: true}
}

func (v NullablePatchShipNav200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchShipNav200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


